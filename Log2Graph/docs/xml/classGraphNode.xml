<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classGraphNode" kind="class" language="C++" prot="public">
    <compoundname>GraphNode</compoundname>
    <includes refid="GraphNode_8h" local="no">GraphNode.h</includes>
    <innerclass refid="structGraphNode_1_1NodeFeatures" prot="public">GraphNode::NodeFeatures</innerclass>
    <innerclass refid="structGraphNode_1_1TemporalFeatures" prot="public">GraphNode::TemporalFeatures</innerclass>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGraphNode_1a9ec8352ce6fc02929d03791bad1b949d" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GraphNode::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>GraphNode::id</qualifiedname>
        <briefdescription>
<para>Unique identifier for the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="97" column="17" bodyfile="includes/GraphNode.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a6cbb744b50fd5621356036ffac4a534a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GraphNode::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>GraphNode::type</qualifiedname>
        <briefdescription>
<para>Type of the node (e.g., &quot;host&quot;, &quot;service&quot;, &quot;domain&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="101" column="17" bodyfile="includes/GraphNode.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a2c594b99d6a85cd46b105fba519da025" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::string&gt; GraphNode::attributes</definition>
        <argsstring></argsstring>
        <name>attributes</name>
        <qualifiedname>GraphNode::attributes</qualifiedname>
        <briefdescription>
<para>Additional attributes associated with the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="105" column="24" bodyfile="includes/GraphNode.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a96d791f3b4c82348ba2f6dd63dc1275d" prot="public" static="no" mutable="no">
        <type><ref refid="structGraphNode_1_1NodeFeatures" kindref="compound">NodeFeatures</ref></type>
        <definition>NodeFeatures GraphNode::features</definition>
        <argsstring></argsstring>
        <name>features</name>
        <qualifiedname>GraphNode::features</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="107" column="18" bodyfile="includes/GraphNode.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a2e621d85ff7e85c26a2fe12e1604e64d" prot="public" static="no" mutable="no">
        <type><ref refid="structGraphNode_1_1TemporalFeatures" kindref="compound">TemporalFeatures</ref></type>
        <definition>TemporalFeatures GraphNode::temporal</definition>
        <argsstring></argsstring>
        <name>temporal</name>
        <qualifiedname>GraphNode::temporal</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="108" column="22" bodyfile="includes/GraphNode.h" bodystart="108" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classGraphNode_1a8ef4f31129e46a8d33a1b2674731e53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GraphNode::GraphNode</definition>
        <argsstring>(const std::string &amp;id, const std::string &amp;type)</argsstring>
        <name>GraphNode</name>
        <qualifiedname>GraphNode::GraphNode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classGraphNode" kindref="compound">GraphNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier of the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the node (e.g., &quot;host&quot;, &quot;service&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="115" column="5" bodyfile="GraphNode.cpp" bodystart="9" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1aec41bf6dc8c079924a0076c6388b8de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::update_connection_features</definition>
        <argsstring>(const std::string &amp;protocol, bool is_outgoing)</argsstring>
        <name>update_connection_features</name>
        <qualifiedname>GraphNode::update_connection_features</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_outgoing</declname>
        </param>
        <briefdescription>
<para>Updates the connection-related features of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method increments the degree counters and updates the protocol counts based on a new connection involving this node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>The protocol of the connection (e.g., &quot;tcp&quot;, &quot;udp&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_outgoing</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the connection is outgoing from this node, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="126" column="10" bodyfile="GraphNode.cpp" bodystart="14" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a9f6e0e9f78b21d99d3c858928762f983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::cleanup_old_connections</definition>
        <argsstring>()</argsstring>
        <name>cleanup_old_connections</name>
        <qualifiedname>GraphNode::cleanup_old_connections</qualifiedname>
        <briefdescription>
<para>Removes timestamps of old connections from the <computeroutput>recent_connections</computeroutput> vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method helps to keep the <computeroutput>recent_connections</computeroutput> vector manageable and relevant for short-term analysis. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="134" column="10" bodyfile="GraphNode.cpp" bodystart="51" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a92cd7727c4e791176e9e255b929b9603" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double GraphNode::calculate_anomaly_score</definition>
        <argsstring>() const</argsstring>
        <name>calculate_anomaly_score</name>
        <qualifiedname>GraphNode::calculate_anomaly_score</qualifiedname>
        <briefdescription>
<para>Calculates an anomaly score for the node based on its current features. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A double representing the anomaly score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="140" column="12" bodyfile="GraphNode.cpp" bodystart="62" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a02be43aa36aa04eb5f47095fde4f95eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::cleanup_time_windows</definition>
        <argsstring>()</argsstring>
        <name>cleanup_time_windows</name>
        <qualifiedname>GraphNode::cleanup_time_windows</qualifiedname>
        <briefdescription>
<para>Removes outdated timestamps from the minute and hour time windows. </para>
        </briefdescription>
        <detaileddescription>
<para>This method ensures that the connection counts for the last minute and last hour are accurate by discarding timestamps that fall outside these windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="148" column="10" bodyfile="GraphNode.cpp" bodystart="76" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1aac8f32f0478ee7262d5db9c6ea4ee1c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GraphNode::get_connections_last_minute</definition>
        <argsstring>() const</argsstring>
        <name>get_connections_last_minute</name>
        <qualifiedname>GraphNode::get_connections_last_minute</qualifiedname>
        <briefdescription>
<para>Gets the number of connections associated with this node in the last minute. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of connections in the last minute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="154" column="9" bodyfile="GraphNode.cpp" bodystart="96" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1ab197cc5d8d2abda61c831cae073cb140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GraphNode::get_connections_last_hour</definition>
        <argsstring>() const</argsstring>
        <name>get_connections_last_hour</name>
        <qualifiedname>GraphNode::get_connections_last_hour</qualifiedname>
        <briefdescription>
<para>Gets the number of connections associated with this node in the last hour. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of connections in the last hour. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="160" column="9" bodyfile="GraphNode.cpp" bodystart="100" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a5cfa8c4a54c8dd7280b9d8a53f938e92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string GraphNode::get_id</definition>
        <argsstring>() const</argsstring>
        <name>get_id</name>
        <qualifiedname>GraphNode::get_id</qualifiedname>
        <briefdescription>
<para>Gets the unique identifier of the node. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The node&apos;s ID. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="166" column="17" bodyfile="includes/GraphNode.h" bodystart="166" bodyend="166"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents a node in the network traffic graph. </para>
    </briefdescription>
    <detaileddescription>
<para>Each <computeroutput><ref refid="classGraphNode" kindref="compound">GraphNode</ref></computeroutput> corresponds to an entity in the network, such as a host, service, or domain. It stores information about the node&apos;s identity, type, attributes, and various statistical features derived from the network traffic. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GraphNode</label>
        <link refid="classGraphNode"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+id</edgelabel>
          <edgelabel>+type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>+attributes</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>+features</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>+temporal</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>GraphNode::NodeFeatures</label>
        <link refid="structGraphNode_1_1NodeFeatures"/>
        <childnode refid="5" relation="usage">
          <edgelabel>+degree</edgelabel>
          <edgelabel>+in_degree</edgelabel>
          <edgelabel>+out_degree</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>+protocol_counts</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>+activity_score</edgelabel>
        </childnode>
      </node>
      <node id="8">
        <label>GraphNode::TemporalFeatures</label>
        <link refid="structGraphNode_1_1TemporalFeatures"/>
        <childnode refid="9" relation="usage">
          <edgelabel>+connections_last_hour</edgelabel>
          <edgelabel>+connections_last_minute</edgelabel>
          <edgelabel>+total_connections</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>+monitoring_start</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>+recent_connections</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>+hour_window</edgelabel>
          <edgelabel>+minute_window</edgelabel>
        </childnode>
        <childnode refid="13" relation="usage">
          <edgelabel>+recent_connections_mutex</edgelabel>
          <edgelabel>+window_mutex</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>atomic&lt; double &gt;</label>
      </node>
      <node id="9">
        <label>atomic&lt; int &gt;</label>
      </node>
      <node id="5">
        <label>atomic&lt; uint32_t &gt;</label>
      </node>
      <node id="10">
        <label>time_point</label>
      </node>
      <node id="6">
        <label>map&lt; std::string, int &gt;</label>
      </node>
      <node id="13">
        <label>mutex</label>
      </node>
      <node id="12">
        <label>queue&lt; std::chrono::system_clock::time_point &gt;</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>unordered_map&lt; std::string, std::string &gt;</label>
      </node>
      <node id="11">
        <label>vector&lt; std::chrono::system_clock::time_point &gt;</label>
      </node>
    </collaborationgraph>
    <location file="includes/GraphNode.h" line="23" column="1" bodyfile="includes/GraphNode.h" bodystart="23" bodyend="167"/>
    <listofallmembers>
      <member refid="classGraphNode_1a2c594b99d6a85cd46b105fba519da025" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>attributes</name></member>
      <member refid="classGraphNode_1a92cd7727c4e791176e9e255b929b9603" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>calculate_anomaly_score</name></member>
      <member refid="classGraphNode_1a9f6e0e9f78b21d99d3c858928762f983" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>cleanup_old_connections</name></member>
      <member refid="classGraphNode_1a02be43aa36aa04eb5f47095fde4f95eb" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>cleanup_time_windows</name></member>
      <member refid="classGraphNode_1a96d791f3b4c82348ba2f6dd63dc1275d" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>features</name></member>
      <member refid="classGraphNode_1ab197cc5d8d2abda61c831cae073cb140" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>get_connections_last_hour</name></member>
      <member refid="classGraphNode_1aac8f32f0478ee7262d5db9c6ea4ee1c5" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>get_connections_last_minute</name></member>
      <member refid="classGraphNode_1a5cfa8c4a54c8dd7280b9d8a53f938e92" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>get_id</name></member>
      <member refid="classGraphNode_1a8ef4f31129e46a8d33a1b2674731e53f" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>GraphNode</name></member>
      <member refid="classGraphNode_1a9ec8352ce6fc02929d03791bad1b949d" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>id</name></member>
      <member refid="classGraphNode_1a2e621d85ff7e85c26a2fe12e1604e64d" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>temporal</name></member>
      <member refid="classGraphNode_1a6cbb744b50fd5621356036ffac4a534a" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>type</name></member>
      <member refid="classGraphNode_1aec41bf6dc8c079924a0076c6388b8de6" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>update_connection_features</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
