<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.13.2" xml:lang="en-US">
    <compounddef id="GraphBuilder_8cpp" kind="file" language="C++">
        <compoundname>GraphBuilder.cpp</compoundname>
        <includes refid="GraphBuilder_8h" local="yes">includes/GraphBuilder.h</includes>
        <incdepgraph>
            <node id="1">
                <label>GraphBuilder.cpp</label>
                <link refid="GraphBuilder_8cpp"/>
                <childnode refid="2" relation="include">
                </childnode>
            </node>
            <node id="6">
                <label>FeatureEncoder.h</label>
                <link refid="FeatureEncoder_8h"/>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="9" relation="include">
                </childnode>
            </node>
            <node id="2">
                <label>includes/GraphBuilder.h</label>
                <link refid="GraphBuilder_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="10" relation="include">
                </childnode>
                <childnode refid="21" relation="include">
                </childnode>
            </node>
            <node id="13">
                <label>GraphEdge.h</label>
                <link refid="GraphEdge_8h"/>
                <childnode refid="14" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="15" relation="include">
                </childnode>
                <childnode refid="16" relation="include">
                </childnode>
            </node>
            <node id="17">
                <label>GraphNode.h</label>
                <link refid="GraphNode_8h"/>
                <childnode refid="18" relation="include">
                </childnode>
                <childnode refid="19" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="14" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="11" relation="include">
                </childnode>
                <childnode refid="20" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
                <childnode refid="15" relation="include">
                </childnode>
                <childnode refid="16" relation="include">
                </childnode>
            </node>
            <node id="10">
                <label>GraphUpdateQueue.h</label>
                <link refid="GraphUpdateQueue_8h"/>
                <childnode refid="11" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="13" relation="include">
                </childnode>
                <childnode refid="17" relation="include">
                </childnode>
            </node>
            <node id="21">
                <label>TrafficGraph.h</label>
                <link refid="TrafficGraph_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="14" relation="include">
                </childnode>
                <childnode refid="13" relation="include">
                </childnode>
                <childnode refid="17" relation="include">
                </childnode>
            </node>
            <node id="18">
                <label>atomic</label>
            </node>
            <node id="14">
                <label>chrono</label>
            </node>
            <node id="9">
                <label>cmath</label>
            </node>
            <node id="12">
                <label>condition_variable</label>
            </node>
            <node id="16">
                <label>iomanip</label>
            </node>
            <node id="19">
                <label>map</label>
            </node>
            <node id="3">
                <label>memory</label>
            </node>
            <node id="4">
                <label>mutex</label>
            </node>
            <node id="11">
                <label>queue</label>
            </node>
            <node id="20">
                <label>set</label>
            </node>
            <node id="15">
                <label>sstream</label>
            </node>
            <node id="7">
                <label>string</label>
            </node>
            <node id="8">
                <label>unordered_map</label>
            </node>
            <node id="5">
                <label>vector</label>
            </node>
        </incdepgraph>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Created<sp/>by<sp/>lu<sp/>on<sp/>4/25/25.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="GraphBuilder_8h" kindref="compound">
                    includes/GraphBuilder.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;iostream&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;memory&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;mutex&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;vector&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal">std::unique_ptr&lt;GraphBuilder&gt;<sp/>GraphBuilder::instance<sp/>=
                    <sp/>
                </highlight>
                <highlight class="keyword">nullptr</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal">std::mutex<sp/>GraphBuilder::instance_mutex;
                </highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classGraphBuilder_1aceabeb2e29b01e4e02f1ea7e4f8310ae" kindref="member">
                        GraphBuilder::add_connection</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>&amp;raw_feature_map,
                </highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::vector&lt;float&gt;<sp/>&amp;encoded_features)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!raw_feature_map.count(
                </highlight>
                <highlight class="stringliteral">&quot;src_ip&quot;</highlight>
                <highlight class="normal">)<sp/>||<sp/>!raw_feature_map.count(
                </highlight>
                <highlight class="stringliteral">&quot;dst_ip&quot;</highlight>
                <highlight class="normal">))<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::cerr<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;Error:<sp/>Missing<sp/>source<sp/>or<sp/>destination<sp/>IP<sp/>
                    in<sp/>connection<sp/>data.&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;
                </highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string&amp;<sp/>src_ip<sp/>=<sp/>raw_feature_map.at(
                </highlight>
                <highlight class="stringliteral">&quot;src_ip&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string&amp;<sp/>dst_ip<sp/>=<sp/>raw_feature_map.at(
                </highlight>
                <highlight class="stringliteral">&quot;dst_ip&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>src_node_ptr<sp/>=<sp/>graph.get_or_create_node(src_ip,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;host&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>dst_node_ptr<sp/>=<sp/>graph.get_or_create_node(dst_ip,
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;host&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>update_queue.push({
                </highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baaf46a4f24a27c47d5a24536031a7541ad"
                         kindref="member">GraphUpdate::Type::NODE_CREATE
                    </ref>
                    <sp/>,
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>src_node_ptr,
                </highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::weak_ptr&lt;GraphEdge&gt;()
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>});
                </highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>update_queue.push({
                </highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baaf46a4f24a27c47d5a24536031a7541ad"
                         kindref="member">GraphUpdate::Type::NODE_CREATE</ref>,
                </highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dst_node_ptr,
                </highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::weak_ptr&lt;GraphEdge&gt;()
                </highlight>
            </codeline>
            <codeline lineno="40">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>});
                </highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::string<sp/>relationship<sp/>=
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;connects_to&quot;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(raw_feature_map.count(
                </highlight>
                <highlight class="stringliteral">&quot;proto&quot;</highlight>
                <highlight class="normal">))<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>relationship<sp/>=<sp/>raw_feature_map.at(
                </highlight>
                <highlight class="stringliteral">&quot;proto&quot;</highlight>
                <highlight class="normal">)<sp/>+
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;_&quot;</highlight>
                <highlight class="normal"><sp/>+<sp/>relationship;
                </highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>new_edge<sp/>=<sp/>std::make_shared&lt;GraphEdge&gt;(src_ip,<sp/>dst_ip,
                    <sp/>relationship);
                </highlight>
            </codeline>
            <codeline lineno="48">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>new_edge-&gt;encoded_features<sp/>=<sp/>encoded_features;
                </highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>new_edge-&gt;attributes<sp/>=<sp/>raw_feature_map;
                </highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>graph.add_edge(new_edge);
                </highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>update_queue.push({
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baa74b5084affe661ad56577f21b1031f4b"
                         kindref="member">GraphUpdate::Type::EDGE_CREATE</ref>,
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::weak_ptr&lt;GraphNode&gt;(),
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>new_edge
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>});
                </highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>src_node_ptr-&gt;update_connection_features(
                </highlight>
                <highlight class="keyword">true</highlight>
                <highlight class="normal">,<sp/>raw_feature_map);
                </highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dst_node_ptr-&gt;update_connection_features(
                </highlight>
                <highlight class="keyword">false</highlight>
                <highlight class="normal">,<sp/>raw_feature_map);
                </highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="normal">
                    <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref>
                    <sp/>&amp;<ref refid="classGraphBuilder_1a791f0173bacd48ce1071e6d87cd8bfaf" kindref="member">
                    GraphBuilder::get_graph</ref>()<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">return</highlight>
                <highlight class="normal"><sp/>graph;
                </highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal">}</highlight>
            </codeline>
        </programlisting>
        <location file="GraphBuilder.cpp"/>
    </compounddef>
</doxygen>
