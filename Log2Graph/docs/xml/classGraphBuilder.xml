<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classGraphBuilder" kind="class" language="C++" prot="public">
    <compoundname>GraphBuilder</compoundname>
    <includes refid="GraphBuilder_8h" local="no">GraphBuilder.h</includes>
    <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classGraphBuilder_1a8b766006264e9775c5cf59cf4f75ccc6" prot="private" static="yes" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> &gt;</type>
        <definition>std::unique_ptr&lt; GraphBuilder &gt; GraphBuilder::instance</definition>
        <argsstring></argsstring>
        <name>instance</name>
        <qualifiedname>GraphBuilder::instance</qualifiedname>
        <initializer>= nullptr</initializer>
        <briefdescription>
<para>Static unique pointer to the single instance of <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="41" column="28" bodyfile="includes/GraphBuilder.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphBuilder_1a5788850f0b02cac0674a723779eea95f" prot="private" static="yes" mutable="no">
        <type>std::mutex</type>
        <definition>std::mutex GraphBuilder::instance_mutex</definition>
        <argsstring></argsstring>
        <name>instance_mutex</name>
        <qualifiedname>GraphBuilder::instance_mutex</qualifiedname>
        <briefdescription>
<para>Static mutex to protect the creation of the singleton instance in a thread-safe manner. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="45" column="23" bodyfile="includes/GraphBuilder.h" bodystart="45" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classGraphBuilder_1aa920996ec34f9e7ff2bbb6249a5b91fd" prot="private" static="no" mutable="no">
        <type><ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref></type>
        <definition>TrafficGraph GraphBuilder::graph</definition>
        <argsstring></argsstring>
        <name>graph</name>
        <qualifiedname>GraphBuilder::graph</qualifiedname>
        <briefdescription>
<para>The underlying traffic graph being built and managed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="50" column="18" bodyfile="includes/GraphBuilder.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphBuilder_1a3ae808c157c8286259e73cb5082ab04d" prot="private" static="no" mutable="no">
        <type><ref refid="classGraphUpdateQueue" kindref="compound">GraphUpdateQueue</ref></type>
        <definition>GraphUpdateQueue GraphBuilder::update_queue</definition>
        <argsstring></argsstring>
        <name>update_queue</name>
        <qualifiedname>GraphBuilder::update_queue</qualifiedname>
        <briefdescription>
<para>Queue of incremental updates. Useful for passing just new graph features when needed. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="60" column="22" bodyfile="includes/GraphBuilder.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphBuilder_1ad5aa5478a79929b7e923bfe08c6d9b9e" prot="private" static="no" mutable="no">
        <type><ref refid="classFeatureEncoder" kindref="compound">FeatureEncoder</ref></type>
        <definition>FeatureEncoder GraphBuilder::feature_encoder</definition>
        <argsstring></argsstring>
        <name>feature_encoder</name>
        <qualifiedname>GraphBuilder::feature_encoder</qualifiedname>
        <briefdescription>
<para>Feature encoder. Useful for passing data to GAT. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="64" column="20" bodyfile="includes/GraphBuilder.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphBuilder_1ad2bbcc61e251124d3e89140596f9bcbe" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; GraphBuilder::save_pending</definition>
        <argsstring></argsstring>
        <name>save_pending</name>
        <qualifiedname>GraphBuilder::save_pending</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="65" column="17" bodyfile="includes/GraphBuilder.h" bodystart="65" bodyend="65"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="private-func">
      <memberdef kind="function" id="classGraphBuilder_1abadf20e37df1dbd53d0a9e4f2e63dfee" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GraphBuilder::GraphBuilder</definition>
        <argsstring>()=default</argsstring>
        <name>GraphBuilder</name>
        <qualifiedname>GraphBuilder::GraphBuilder</qualifiedname>
        <briefdescription>
<para>Default Constructor. Private to enforce signeton pattern. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="55" column="5"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classGraphBuilder_1a3af3213174c72b1eda8f3a0e21bba54b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>GraphBuilder::GraphBuilder</definition>
        <argsstring>(const GraphBuilder &amp;)=delete</argsstring>
        <name>GraphBuilder</name>
        <qualifiedname>GraphBuilder::GraphBuilder</qualifiedname>
        <param>
          <type>const <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted copy constructor to prevent copying of the singleton instance. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="71" column="5"/>
      </memberdef>
      <memberdef kind="function" id="classGraphBuilder_1acbd5f45fa3be1fa61975e8fefedd3278" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> &amp;</type>
        <definition>GraphBuilder &amp; GraphBuilder::operator=</definition>
        <argsstring>(const GraphBuilder &amp;)=delete</argsstring>
        <name>operator=</name>
        <qualifiedname>GraphBuilder::operator=</qualifiedname>
        <param>
          <type>const <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Deleted assignment operator to prevent assignment of the singleton instance. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="77" column="18"/>
      </memberdef>
      <memberdef kind="function" id="classGraphBuilder_1a88d61bc652bfa5a60a8cd1aa8509d27c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structGraphUpdate" kindref="compound">GraphUpdate</ref> &gt;</type>
        <definition>std::vector&lt; GraphUpdate &gt; GraphBuilder::get_last_updates</definition>
        <argsstring>()</argsstring>
        <name>get_last_updates</name>
        <qualifiedname>GraphBuilder::get_last_updates</qualifiedname>
        <briefdescription>
<para>Gets the update list for the graph. </para>
        </briefdescription>
        <detaileddescription>
<para>This is useful for periodic dumping, to just export incremental updates.</para>
<para><simplesect kind="return"><para></para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="102" column="17" bodyfile="includes/GraphBuilder.h" bodystart="102" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classGraphBuilder_1a022b58b16ad42721ed0a55c4e5ee2ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphBuilder::add_connection</definition>
        <argsstring>(const std::string &amp;src_ip, const std::string &amp;dst_ip, const std::string &amp;proto, const std::string &amp;service, const std::string &amp;timestamp, const int src_port, const int dst_port, const int orig_bytes, const int resp_bytes, const std::string &amp;conn_state, const bool local_orig, const bool local_resp, const std::string &amp;history, const int orig_pkts, const int resp_pkts, const int orig_ip_bytes, const int resp_ip_bytes, const std::string &amp;version=&quot;&quot;, const std::string &amp;cipher=&quot;&quot;, const std::string &amp;curve=&quot;&quot;, const std::string &amp;server_name=&quot;&quot;, const bool resumed=false, const std::string &amp;last_alert=&quot;&quot;, const std::string &amp;next_protocol=&quot;&quot;, const bool established=false, const std::string &amp;ssl_history=&quot;&quot;, const std::string &amp;cert_chain_fps=&quot;&quot;, const std::string &amp;client_cert_chain_fps=&quot;&quot;, const bool sni_matches_cert=false, const std::string &amp;http_method=&quot;&quot;, const std::string &amp;http_host=&quot;&quot;, const std::string &amp;http_uri=&quot;&quot;, const std::string &amp;http_referrer=&quot;&quot;, const std::string &amp;http_version=&quot;&quot;, const std::string &amp;http_user_agent=&quot;&quot;, const std::string &amp;http_origin=&quot;&quot;, const std::string &amp;http_status_code=&quot;&quot;, const std::string &amp;http_username=&quot;&quot;)</argsstring>
        <name>add_connection</name>
        <qualifiedname>GraphBuilder::add_connection</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>src_ip</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dst_ip</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>proto</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>service</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>timestamp</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>src_port</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>dst_port</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>orig_bytes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>resp_bytes</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>conn_state</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>local_orig</declname>
        </param>
        <param>
          <type>const bool</type>
          <declname>local_resp</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>history</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>orig_pkts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>resp_pkts</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>orig_ip_bytes</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>resp_ip_bytes</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cipher</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>curve</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>server_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>resumed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>last_alert</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>next_protocol</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>established</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ssl_history</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cert_chain_fps</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_cert_chain_fps</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const bool</type>
          <declname>sni_matches_cert</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_method</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_host</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_uri</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_referrer</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_version</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_user_agent</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_origin</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_status_code</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>http_username</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>Processes a network connection event and adds the corresponding nodes and edges to the graph, including SSL and HTTP related information if available. </para>
        </briefdescription>
        <detaileddescription>
<para>This method takes details of a network connection (e.g., source and destination IPs, ports, protocol) and updates the traffic graph by adding or retrieving the involved nodes and creating an edge representing the connection between them. It also updates the temporal features of the nodes and includes SSL-specific details such as version, cipher, and certificates, and HTTP-specific details such as method, URI, and status code if provided.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>src_ip</parametername>
</parameternamelist>
<parameterdescription>
<para>Source IP address of the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_ip</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination IP address of the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>Protocol of the connection (e.g., &quot;tcp&quot;, &quot;udp&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>service</parametername>
</parameternamelist>
<parameterdescription>
<para>Service from a list of known services. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timestamp</parametername>
</parameternamelist>
<parameterdescription>
<para>Timestamp of the connection event. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>src_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Source port of the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dst_port</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination port of the connection. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes sent by the originator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resp_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes sent by the responder. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>conn_state</parametername>
</parameternamelist>
<parameterdescription>
<para>Connection state (e.g., &quot;REJ&quot;, &quot;SF&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_orig</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the originator is local. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>local_resp</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the responder is local. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>History of the connection (e.g., packet states). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_pkts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of packets sent by the originator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resp_pkts</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of packets sent by the responder. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>orig_ip_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of IP bytes sent by the originator. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resp_ip_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of IP bytes sent by the responder. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL/TLS version (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cipher</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL/TLS cipher suite (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>curve</parametername>
</parameternamelist>
<parameterdescription>
<para>Elliptic curve used for key exchange (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>server_name</parametername>
</parameternamelist>
<parameterdescription>
<para>Server Name Indication (SNI) (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>resumed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the SSL/TLS session was resumed (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_alert</parametername>
</parameternamelist>
<parameterdescription>
<para>The last SSL/TLS alert sent or received (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>next_protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>The next protocol negotiated via ALPN (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>established</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the SSL/TLS connection was established (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ssl_history</parametername>
</parameternamelist>
<parameterdescription>
<para>SSL/TLS state history (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cert_chain_fps</parametername>
</parameternamelist>
<parameterdescription>
<para>Fingerprints of the server&apos;s certificate chain (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_cert_chain_fps</parametername>
</parameternamelist>
<parameterdescription>
<para>Fingerprints of the client&apos;s certificate chain (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>sni_matches_cert</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the SNI matched the presented certificate (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_method</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP request method (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_host</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP host header (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_uri</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP request URI (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_referrer</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP referrer header (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_version</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP version (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_user_agent</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP user-agent header (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_origin</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP origin header (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_status_code</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP response status code (if applicable). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>http_username</parametername>
</parameternamelist>
<parameterdescription>
<para>HTTP username (if applicable). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="155" column="10" bodyfile="GraphBuilder.cpp" bodystart="17" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classGraphBuilder_1a791f0173bacd48ce1071e6d87cd8bfaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref> &amp;</type>
        <definition>TrafficGraph &amp; GraphBuilder::get_graph</definition>
        <argsstring>()</argsstring>
        <name>get_graph</name>
        <qualifiedname>GraphBuilder::get_graph</qualifiedname>
        <briefdescription>
<para>Gets a reference to the underlying <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref> object. </para>
        </briefdescription>
        <detaileddescription>
<para>This method provides access to the <computeroutput><ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref></computeroutput> object managed by the <computeroutput><ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref></computeroutput>.</para>
<para><simplesect kind="return"><para>A reference to the <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref> object. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="193" column="18" bodyfile="GraphBuilder.cpp" bodystart="130" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classGraphBuilder_1a5bd30a82778691790ebf82f364494a41" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t GraphBuilder::get_feature_dimension</definition>
        <argsstring>() const</argsstring>
        <name>get_feature_dimension</name>
        <qualifiedname>GraphBuilder::get_feature_dimension</qualifiedname>
        <briefdescription>
<para>Gets the dimension of the encoded feature vector. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of feature vector produced by the encoder </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="199" column="12" bodyfile="includes/GraphBuilder.h" bodystart="199" bodyend="202"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classGraphBuilder_1adbe9d786ed3fbcd471f83e3ec9ac9efa" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> &amp;</type>
        <definition>static GraphBuilder &amp; GraphBuilder::get_instance</definition>
        <argsstring>()</argsstring>
        <name>get_instance</name>
        <qualifiedname>GraphBuilder::get_instance</qualifiedname>
        <briefdescription>
<para>Gets the singleton instance of the <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>This is the entry point to access the <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref>. If the instance has not been created yet, it creates one in a thread-safe way.</para>
<para><simplesect kind="return"><para>A reference to the single <ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref> instance. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphBuilder.h" line="87" column="25" bodyfile="includes/GraphBuilder.h" bodystart="87" bodyend="93"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Singleton class responsible for building and managing the network traffic graph. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classGraphBuilder" kindref="compound">GraphBuilder</ref></computeroutput> class provides a single point of access to the <computeroutput><ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref></computeroutput> and offers methods to process raw network traffic data (e.g., from Zeek logs) and add corresponding nodes and edges to the graph. The singleton pattern ensures that only one instance of the graph builder exists throughout the application. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GraphBuilder</label>
        <link refid="classGraphBuilder"/>
      </node>
    </collaborationgraph>
    <location file="includes/GraphBuilder.h" line="36" column="1" bodyfile="includes/GraphBuilder.h" bodystart="36" bodyend="203"/>
    <listofallmembers>
      <member refid="classGraphBuilder_1a022b58b16ad42721ed0a55c4e5ee2ea1" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>add_connection</name></member>
      <member refid="classGraphBuilder_1ad5aa5478a79929b7e923bfe08c6d9b9e" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>feature_encoder</name></member>
      <member refid="classGraphBuilder_1a5bd30a82778691790ebf82f364494a41" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>get_feature_dimension</name></member>
      <member refid="classGraphBuilder_1a791f0173bacd48ce1071e6d87cd8bfaf" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>get_graph</name></member>
      <member refid="classGraphBuilder_1adbe9d786ed3fbcd471f83e3ec9ac9efa" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>get_instance</name></member>
      <member refid="classGraphBuilder_1a88d61bc652bfa5a60a8cd1aa8509d27c" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>get_last_updates</name></member>
      <member refid="classGraphBuilder_1aa920996ec34f9e7ff2bbb6249a5b91fd" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>graph</name></member>
      <member refid="classGraphBuilder_1abadf20e37df1dbd53d0a9e4f2e63dfee" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>GraphBuilder</name></member>
      <member refid="classGraphBuilder_1a3af3213174c72b1eda8f3a0e21bba54b" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>GraphBuilder</name></member>
      <member refid="classGraphBuilder_1a8b766006264e9775c5cf59cf4f75ccc6" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>instance</name></member>
      <member refid="classGraphBuilder_1a5788850f0b02cac0674a723779eea95f" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>instance_mutex</name></member>
      <member refid="classGraphBuilder_1acbd5f45fa3be1fa61975e8fefedd3278" prot="public" virt="non-virtual"><scope>GraphBuilder</scope><name>operator=</name></member>
      <member refid="classGraphBuilder_1ad2bbcc61e251124d3e89140596f9bcbe" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>save_pending</name></member>
      <member refid="classGraphBuilder_1a3ae808c157c8286259e73cb5082ab04d" prot="private" virt="non-virtual"><scope>GraphBuilder</scope><name>update_queue</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
