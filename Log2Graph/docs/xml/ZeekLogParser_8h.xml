<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="ZeekLogParser_8h" kind="file" language="C++">
    <compoundname>ZeekLogParser.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">filesystem</includes>
    <includedby refid="LogMonitor_8cpp" local="yes">LogMonitor.cpp</includedby>
    <includedby refid="ZeekLogParser_8cpp" local="yes">ZeekLogParser.cpp</includedby>
    <includedby refid="LogMonitor_8h" local="yes">includes/LogMonitor.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>includes/ZeekLogParser.h</label>
        <link refid="ZeekLogParser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>filesystem</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>unordered_map</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>LogMonitor.cpp</label>
        <link refid="LogMonitor_8cpp"/>
      </node>
      <node id="3">
        <label>ZeekLogParser.cpp</label>
        <link refid="ZeekLogParser_8cpp"/>
      </node>
      <node id="4">
        <label>includes/LogMonitor.h</label>
        <link refid="LogMonitor_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>includes/ZeekLogParser.h</label>
        <link refid="ZeekLogParser_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structFileState" prot="public">FileState</innerclass>
    <innerclass refid="classZeekLogParser" prot="public">ZeekLogParser</innerclass>
    <briefdescription>
<para>Header file for the <ref refid="classZeekLogParser" kindref="compound">ZeekLogParser</ref> class, responsible for parsing Zeek log files. </para>
    </briefdescription>
    <detaileddescription>
<para>This file defines the <computeroutput><ref refid="classZeekLogParser" kindref="compound">ZeekLogParser</ref></computeroutput> class, which parses Zeek log files to extract network traffic information. It also defines the <computeroutput><ref refid="structFileState" kindref="compound">FileState</ref></computeroutput> struct to track the state of monitored log files. </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Created<sp/>by<sp/>lu<sp/>on<sp/>4/25/25.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ZEEKLOGPARSER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZEEKLOGPARSER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;filesystem&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structFileState" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structFileState_1a29ca2864c94e4eca416d81007058eb4f" kindref="member">FileState</ref><sp/>{</highlight></codeline>
<codeline lineno="29" refid="structFileState_1ae010c4938bde94f555a4589146fa7b39" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>ino_t<sp/><ref refid="structFileState_1ae010c4938bde94f555a4589146fa7b39" kindref="member">inode</ref>;</highlight></codeline>
<codeline lineno="33" refid="structFileState_1acb4eeb0f402fe2ff73624f40fd8b6183" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>off_t<sp/><ref refid="structFileState_1acb4eeb0f402fe2ff73624f40fd8b6183" kindref="member">last_size</ref>;</highlight></codeline>
<codeline lineno="37" refid="structFileState_1aa54fe5f4df7f270814dd53db110bb7d5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structFileState_1aa54fe5f4df7f270814dd53db110bb7d5" kindref="member">path</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="structFileState_1a29ca2864c94e4eca416d81007058eb4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFileState_1a29ca2864c94e4eca416d81007058eb4f" kindref="member">FileState</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structFileState_1ae6c916efcf345fedb2a4165b5c637aba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structFileState_1ae6c916efcf345fedb2a4165b5c637aba" kindref="member">FileState</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>p)<sp/>:<sp/><ref refid="structFileState_1aa54fe5f4df7f270814dd53db110bb7d5" kindref="member">path</ref>(p),<sp/><ref refid="structFileState_1acb4eeb0f402fe2ff73624f40fd8b6183" kindref="member">last_size</ref>(0),<sp/><ref refid="structFileState_1ae010c4938bde94f555a4589146fa7b39" kindref="member">inode</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structFileState_1a8a334d569b2977c7ccc221d6d01ada41" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structFileState_1a8a334d569b2977c7ccc221d6d01ada41" kindref="member">update</ref>();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structFileState_1ac6b4ee72d0eac3bd51186f1d84af950b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFileState" kindref="compound">FileState</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classZeekLogParser" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classZeekLogParser_1ac14af41e221d8102cebb6f73ab750f20" kindref="member">ZeekLogParser</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92" refid="classZeekLogParser_1ac14af41e221d8102cebb6f73ab750f20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classZeekLogParser_1ac14af41e221d8102cebb6f73ab750f20" kindref="member">ZeekLogParser</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>log_dir)<sp/>:<sp/>log_directory(log_dir)<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZeekLogParser_1af922e185b33640058001015a136545a3" kindref="member">monitor_logs</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZeekLogParser_1afc2dc1c7ef6b3d99d96c17156b565bff" kindref="member">process_new_file</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structFileState" kindref="compound">FileState</ref><sp/>&amp;file);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZeekLogParser_1ab40d5d847d4254335368a0231bca696d" kindref="member">process_appended_data</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path,<sp/>off_t<sp/>old_size,<sp/>off_t<sp/>new_size);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classZeekLogParser_1a5a5dee5a6d6c6daf5fb1a517f848961e" kindref="member">process_content</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;content);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>FileState&gt;<sp/>tracked_files;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>log_directory;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unordered_map&lt;std::string,<sp/>std::string&gt;<sp/>partial_lines;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_log_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::filesystem::path&amp;<sp/>file_path);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_log_entry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>log_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>entry);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_conn_entry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>entry);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>process_http_entry(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>entry);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">//<sp/>ZEEKLOGPARSER_H</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="includes/ZeekLogParser.h"/>
  </compounddef>
</doxygen>
