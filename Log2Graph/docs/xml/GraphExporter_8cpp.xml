<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd"
         version="1.13.2" xml:lang="en-US">
    <compounddef id="GraphExporter_8cpp" kind="file" language="C++">
        <compoundname>GraphExporter.cpp</compoundname>
        <includes refid="GraphExporter_8h" local="yes">includes/GraphExporter.h</includes>
        <includes refid="GraphNode_8h" local="yes">includes/GraphNode.h</includes>
        <includes local="no">algorithm</includes>
        <includes local="no">iostream</includes>
        <includes local="no">fstream</includes>
        <includes local="no">iomanip</includes>
        <includes local="no">thread</includes>
        <incdepgraph>
            <node id="1">
                <label>GraphExporter.cpp</label>
                <link refid="GraphExporter_8cpp"/>
                <childnode refid="2" relation="include">
                </childnode>
                <childnode refid="18" relation="include">
                </childnode>
                <childnode refid="25" relation="include">
                </childnode>
                <childnode refid="26" relation="include">
                </childnode>
                <childnode refid="27" relation="include">
                </childnode>
                <childnode refid="17" relation="include">
                </childnode>
                <childnode refid="28" relation="include">
                </childnode>
            </node>
            <node id="7">
                <label>FeatureEncoder.h</label>
                <link refid="FeatureEncoder_8h"/>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="9" relation="include">
                </childnode>
                <childnode refid="10" relation="include">
                </childnode>
            </node>
            <node id="3">
                <label>GraphBuilder.h</label>
                <link refid="GraphBuilder_8h"/>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
                <childnode refid="11" relation="include">
                </childnode>
                <childnode refid="22" relation="include">
                </childnode>
            </node>
            <node id="14">
                <label>GraphEdge.h</label>
                <link refid="GraphEdge_8h"/>
                <childnode refid="15" relation="include">
                </childnode>
                <childnode refid="9" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="7" relation="include">
                </childnode>
                <childnode refid="16" relation="include">
                </childnode>
                <childnode refid="17" relation="include">
                </childnode>
            </node>
            <node id="2">
                <label>includes/GraphExporter.h</label>
                <link refid="GraphExporter_8h"/>
                <childnode refid="3" relation="include">
                </childnode>
                <childnode refid="23" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="24" relation="include">
                </childnode>
            </node>
            <node id="18">
                <label>GraphNode.h</label>
                <link refid="GraphNode_8h"/>
                <childnode refid="19" relation="include">
                </childnode>
                <childnode refid="20" relation="include">
                </childnode>
                <childnode refid="9" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="15" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="12" relation="include">
                </childnode>
                <childnode refid="21" relation="include">
                </childnode>
                <childnode refid="8" relation="include">
                </childnode>
                <childnode refid="16" relation="include">
                </childnode>
                <childnode refid="17" relation="include">
                </childnode>
            </node>
            <node id="11">
                <label>GraphUpdateQueue.h</label>
                <link refid="GraphUpdateQueue_8h"/>
                <childnode refid="12" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="13" relation="include">
                </childnode>
                <childnode refid="6" relation="include">
                </childnode>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="14" relation="include">
                </childnode>
                <childnode refid="18" relation="include">
                </childnode>
            </node>
            <node id="22">
                <label>TrafficGraph.h</label>
                <link refid="TrafficGraph_8h"/>
                <childnode refid="4" relation="include">
                </childnode>
                <childnode refid="5" relation="include">
                </childnode>
                <childnode refid="15" relation="include">
                </childnode>
                <childnode refid="14" relation="include">
                </childnode>
                <childnode refid="18" relation="include">
                </childnode>
            </node>
            <node id="25">
                <label>algorithm</label>
            </node>
            <node id="19">
                <label>atomic</label>
            </node>
            <node id="15">
                <label>chrono</label>
            </node>
            <node id="10">
                <label>cmath</label>
            </node>
            <node id="13">
                <label>condition_variable</label>
            </node>
            <node id="27">
                <label>fstream</label>
            </node>
            <node id="24">
                <label>future</label>
            </node>
            <node id="23">
                <label>graphviz/gvc.h</label>
            </node>
            <node id="17">
                <label>iomanip</label>
            </node>
            <node id="26">
                <label>iostream</label>
            </node>
            <node id="20">
                <label>map</label>
            </node>
            <node id="4">
                <label>memory</label>
            </node>
            <node id="5">
                <label>mutex</label>
            </node>
            <node id="12">
                <label>queue</label>
            </node>
            <node id="21">
                <label>set</label>
            </node>
            <node id="16">
                <label>sstream</label>
            </node>
            <node id="8">
                <label>string</label>
            </node>
            <node id="28">
                <label>thread</label>
            </node>
            <node id="9">
                <label>unordered_map</label>
            </node>
            <node id="6">
                <label>vector</label>
            </node>
        </incdepgraph>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <programlisting>
            <codeline lineno="1">
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="2">
                <highlight class="normal"></highlight>
                <highlight class="comment">//<sp/>Created<sp/>by<sp/>lu<sp/>on<sp/>4/28/25.
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="3">
                <highlight class="normal"></highlight>
                <highlight class="comment">//</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="4">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="5">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="GraphExporter_8h" kindref="compound">
                    includes/GraphExporter.h</ref>&quot;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="6">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&quot;<ref refid="GraphNode_8h" kindref="compound">
                    includes/GraphNode.h</ref>&quot;
                </highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Include<sp/>GraphNode<sp/>for<sp/>accessing<sp/>features
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="7">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="8">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="9">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;iostream&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="10">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;fstream&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="11">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="12">
                <highlight class="normal"></highlight>
                <highlight class="preprocessor">#include<sp/>&lt;thread&gt;
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="13">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="14">
                <highlight class="normal"><ref refid="classGraphExporter_1ad6ec946fe1111d8543118747b9883895"
                                               kindref="member">GraphExporter::GraphExporter</ref>()<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="15">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="16">
                <highlight class="normal"><ref refid="classGraphExporter_1af8456887e192d89491c058fb1eb09e97"
                                               kindref="member">GraphExporter::~GraphExporter</ref>()<sp/>{}
                </highlight>
            </codeline>
            <codeline lineno="17">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="18">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classGraphExporter_1ab7a5103acd18ab33827bfff8e560037a" kindref="member">
                        GraphExporter::export_full_graph_human_readable_async</ref>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref>
                    <sp/>&amp;graph,
                </highlight>
            </codeline>
            <codeline lineno="19">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string<sp/>&amp;output_file,
                </highlight>
            </codeline>
            <codeline lineno="20">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>open_image,
                    <sp/>
                </highlight>
                <highlight class="keywordtype">bool</highlight>
                <highlight class="normal"><sp/>export_cond)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="21">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::thread<sp/>t(&amp;GraphExporter::export_full_graph_worker,
                    <sp/>
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal">,<sp/>std::ref(graph),<sp/>output_file);
                </highlight>
            </codeline>
            <codeline lineno="22">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>t.detach();
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Detach<sp/>the<sp/>thread<sp/>so<sp/>it<sp/>runs<sp/>independently
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="23">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="24">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="25">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classGraphExporter_1ac61130aae979af8b0ed875bcf036208d" kindref="member">
                        GraphExporter::export_incremental_update_encoded_async</ref>(std::vector&lt;GraphUpdate&gt;<sp/>
                    updates,
                </highlight>
            </codeline>
            <codeline lineno="26">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string<sp/>&amp;output_file)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="27">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::thread<sp/>t(&amp;GraphExporter::export_incremental_update_worker,
                    <sp/>
                </highlight>
                <highlight class="keyword">this</highlight>
                <highlight class="normal">,<sp/>updates,<sp/>output_file);
                </highlight>
            </codeline>
            <codeline lineno="28">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>t.detach();
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Detach<sp/>the<sp/>thread<sp/>so<sp/>it<sp/>runs<sp/>independently
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="29">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="30">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="31">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>GraphExporter::export_full_graph_worker(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref>
                    <sp/>&amp;graph,
                </highlight>
            </codeline>
            <codeline lineno="32">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string<sp/>&amp;output_file)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="33">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!graph.<ref refid="classTrafficGraph_1ae485051f1b4e6f8cbb91ad7d89dc89b1"
                                                            kindref="member">is_empty</ref>())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="34">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>export_to_dot(graph,<sp/>output_file<sp/>+
                    <sp/>
                </highlight>
                <highlight class="stringliteral">&quot;.dot&quot;</highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="35">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(graph.<ref refid="classTrafficGraph_1ae485051f1b4e6f8cbb91ad7d89dc89b1"
                                                           kindref="member">is_empty</ref>())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="36">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;Empty<sp/>graph!&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;
                </highlight>
            </codeline>
            <codeline lineno="37">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="38">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="39">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="40">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>GraphExporter::export_incremental_update_worker(std::vector&lt;GraphUpdate&gt;<sp/>
                    updates,
                </highlight>
            </codeline>
            <codeline lineno="41">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string<sp/>&amp;output_file)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="42">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!updates.empty())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="43">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::ofstream<sp/>ofs(output_file);
                </highlight>
            </codeline>
            <codeline lineno="44">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(!ofs.is_open())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="45">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">throw</highlight>
                <highlight class="normal"><sp/>std::runtime_error(
                </highlight>
                <highlight class="stringliteral">&quot;Failed<sp/>to<sp/>open<sp/>output<sp/>file.&quot;
                </highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="46">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="47">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="48">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="comment">//<sp/>Write<sp/>DOT<sp/>format<sp/>header
                </highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="49">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;digraph<sp/>NWTraffic_update<sp/>{\n&quot;
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="50">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>&amp;update:<sp/>updates)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="51">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">switch</highlight>
                <highlight class="normal"><sp/>(update.type)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="52">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baaf46a4f24a27c47d5a24536031a7541ad"
                         kindref="member">GraphUpdate::Type::NODE_CREATE</ref>:
                </highlight>
            </codeline>
            <codeline lineno="53">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>node<sp/>=<sp/>update.node.lock())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="54">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>node-&gt;to_dot_string();
                </highlight>
            </codeline>
            <codeline lineno="55">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="56">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="57">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baa74b5084affe661ad56577f21b1031f4b"
                         kindref="member">GraphUpdate::Type::EDGE_CREATE</ref>:
                </highlight>
            </codeline>
            <codeline lineno="58">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>edge<sp/>=<sp/>update.edge.lock())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="59">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>
                    <sp/>\&quot;&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>
                    <ref refid="classGraphEdge_1a66cb15ff27f3bed9df1809a614cb43f6" kindref="member">
                        GraphEdge::escape_dot_string</ref>(edge-&gt;source)<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\&quot;<sp/>-&gt;<sp/>\&quot;&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>
                    <ref refid="classGraphEdge_1a66cb15ff27f3bed9df1809a614cb43f6" kindref="member">
                        GraphEdge::escape_dot_string</ref>(edge-&gt;target)<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;\&quot;<sp/>[&quot;
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="60">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keywordtype">size_t</highlight>
                <highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>edge-&gt;encoded_features.size();<sp/>
                    ++i)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="61">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(i<sp/>!=<sp/>0)<sp/>ofs<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;,&quot;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="62">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>
                    <ref refid="classFeatureEncoder_1a28d3e22e320c0a37824c6b0762f7ba35" kindref="member">
                        FeatureEncoder::get_feature_name</ref>(i)<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;=&quot;</highlight>
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="63">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>&lt;&lt;<sp/>edge-&gt;encoded_features[i];
                </highlight>
            </codeline>
            <codeline lineno="64">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="65">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>
                    <sp/>];\n&quot;
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="66">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="67">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="68">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">case</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="structGraphUpdate_1a37a13b443637ec95ee3f8763587838baa37d2fc1bfd9732632eb6e0808e1a5ab7"
                         kindref="member">GraphUpdate::Type::NODE_UPDATE</ref>:
                </highlight>
            </codeline>
            <codeline lineno="69">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">if</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>node<sp/>=<sp/>update.node.lock())<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="70">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>node-&gt;to_dot_string();
                </highlight>
            </codeline>
            <codeline lineno="71">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="72">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">break</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="73">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">default</highlight>
                <highlight class="normal">:</highlight>
            </codeline>
            <codeline lineno="74">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">throw</highlight>
                <highlight class="normal"><sp/>std::runtime_error(
                </highlight>
                <highlight class="stringliteral">&quot;Unknown<sp/>GraphUpdate<sp/>type.&quot;
                </highlight>
                <highlight class="normal">);</highlight>
            </codeline>
            <codeline lineno="75">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="76">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="77">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;}\n&quot;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="78">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>ofs.close();
                </highlight>
            </codeline>
            <codeline lineno="79">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;File<sp/>&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>output_file<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>written&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;
                </highlight>
            </codeline>
            <codeline lineno="80">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                    <sp/>
                </highlight>
                <highlight class="keywordflow">else</highlight>
                <highlight class="normal"><sp/>{
                </highlight>
            </codeline>
            <codeline lineno="81">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;Empty<sp/>updates<sp/>vector!&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;
                </highlight>
            </codeline>
            <codeline lineno="82">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="83">
                <highlight class="normal">}</highlight>
            </codeline>
            <codeline lineno="84">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="85">
                <highlight class="normal"></highlight>
                <highlight class="keywordtype">void</highlight>
                <highlight class="normal"><sp/>GraphExporter::export_to_dot(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                    <ref refid="classTrafficGraph" kindref="compound">TrafficGraph</ref>
                    <sp/>&amp;graph,
                    <sp/>
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal"><sp/>std::string<sp/>&amp;filename)<sp/>{
                </highlight>
            </codeline>
            <codeline lineno="86">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::ofstream<sp/>dot_file(filename);
                </highlight>
            </codeline>
            <codeline lineno="87">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dot_file<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;digraph<sp/>ZeekTraffic<sp/>{\n&quot;
                </highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="88">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="89">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>&amp;node:<sp/>graph.<ref
                        refid="classTrafficGraph_1a503a7eb165f5df6b3099b10e71774735" kindref="member">get_nodes</ref>())
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="90">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dot_file<sp/>&lt;&lt;<sp/>node-&gt;to_dot_string();
                </highlight>
            </codeline>
            <codeline lineno="91">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="92">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="93">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                </highlight>
                <highlight class="keywordflow">for</highlight>
                <highlight class="normal"><sp/>(
                </highlight>
                <highlight class="keyword">const</highlight>
                <highlight class="normal">
                    <sp/>
                </highlight>
                <highlight class="keyword">auto</highlight>
                <highlight class="normal"><sp/>&amp;edge:<sp/>graph.<ref
                        refid="classTrafficGraph_1a9537afb96e766b4d910038a7b503af7f" kindref="member">get_edges</ref>())
                    <sp/>{
                </highlight>
            </codeline>
            <codeline lineno="94">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dot_file<sp/>&lt;&lt;<sp/>edge-&gt;to_dot_string();
                </highlight>
            </codeline>
            <codeline lineno="95">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>}
                </highlight>
            </codeline>
            <codeline lineno="96">
                <highlight class="normal"></highlight>
            </codeline>
            <codeline lineno="97">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dot_file<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;}\n&quot;</highlight>
                <highlight class="normal">;</highlight>
            </codeline>
            <codeline lineno="98">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>dot_file.close();
                </highlight>
            </codeline>
            <codeline lineno="99">
                <highlight class="normal">
                    <sp/>
                    <sp/>
                    <sp/>
                    <sp/>std::cout<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;File<sp/>&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>filename<sp/>&lt;&lt;<sp/>
                </highlight>
                <highlight class="stringliteral">&quot;<sp/>written&quot;
                </highlight>
                <highlight class="normal"><sp/>&lt;&lt;<sp/>std::endl;
                </highlight>
            </codeline>
            <codeline lineno="100">
                <highlight class="normal">}</highlight>
            </codeline>
        </programlisting>
        <location file="GraphExporter.cpp"/>
    </compounddef>
</doxygen>
