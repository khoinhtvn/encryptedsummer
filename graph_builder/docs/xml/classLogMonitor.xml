<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classLogMonitor" kind="class" language="C++" prot="public">
    <compoundname>LogMonitor</compoundname>
    <includes refid="LogMonitor_8h" local="no">LogMonitor.h</includes>
    <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLogMonitor_1a6dc3d433f8b192938592dbe40de9a360" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; bool &gt;</type>
        <definition>std::atomic&lt;bool&gt; LogMonitor::running</definition>
        <argsstring></argsstring>
        <name>running</name>
        <qualifiedname>LogMonitor::running</qualifiedname>
        <initializer>{false}</initializer>
        <briefdescription>
<para>Atomic boolean flag indicating whether the monitor thread is running. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="31" column="17" bodyfile="includes/LogMonitor.h" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="variable" id="classLogMonitor_1a2a98b0f60af7779ac8a793cd31ba77fa" prot="private" static="no" mutable="no">
        <type>std::thread</type>
        <definition>std::thread LogMonitor::monitor_thread</definition>
        <argsstring></argsstring>
        <name>monitor_thread</name>
        <qualifiedname>LogMonitor::monitor_thread</qualifiedname>
        <briefdescription>
<para>Thread object for the monitor thread. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="35" column="17" bodyfile="includes/LogMonitor.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogMonitor_1ab753311ac18f38efe399f01276d699e6" prot="private" static="no" mutable="no">
        <type><ref refid="classZeekLogParser" kindref="compound">ZeekLogParser</ref></type>
        <definition>ZeekLogParser LogMonitor::parser</definition>
        <argsstring></argsstring>
        <name>parser</name>
        <qualifiedname>LogMonitor::parser</qualifiedname>
        <briefdescription>
<para>Instance of the <ref refid="classZeekLogParser" kindref="compound">ZeekLogParser</ref> class used to parse the log files. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="39" column="19" bodyfile="includes/LogMonitor.h" bodystart="39" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classLogMonitor_1a1574c6cc7f766782e8d4b9d22cfba910" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogMonitor::LogMonitor</definition>
        <argsstring>(const std::string &amp;log_dir)</argsstring>
        <name>LogMonitor</name>
        <qualifiedname>LogMonitor::LogMonitor</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>log_dir</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classLogMonitor" kindref="compound">LogMonitor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes the <ref refid="classLogMonitor" kindref="compound">LogMonitor</ref> with the directory to monitor for Zeek logs.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>log_dir</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the directory containing the Zeek log files. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="49" column="5" bodyfile="LogMonitor.cpp" bodystart="18" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="classLogMonitor_1a457807b7ece78c43bddb00d2a370d337" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogMonitor::~LogMonitor</definition>
        <argsstring>()</argsstring>
        <name>~LogMonitor</name>
        <qualifiedname>LogMonitor::~LogMonitor</qualifiedname>
        <briefdescription>
<para>Destructor for the <ref refid="classLogMonitor" kindref="compound">LogMonitor</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>Stops the monitor thread and joins it to ensure proper cleanup. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="56" column="5" bodyfile="LogMonitor.cpp" bodystart="20" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="classLogMonitor_1a06798e36d1f46ba50036cdf4e511464a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogMonitor::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <qualifiedname>LogMonitor::start</qualifiedname>
        <briefdescription>
<para>Starts the log monitoring process in a separate thread. </para>
        </briefdescription>
        <detaileddescription>
<para>This method starts the monitor thread, which will continuously check for new log files and process them. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="64" column="10" bodyfile="LogMonitor.cpp" bodystart="24" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classLogMonitor_1af306da2a690908fb9a9369946791cafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogMonitor::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <qualifiedname>LogMonitor::stop</qualifiedname>
        <briefdescription>
<para>Stops the log monitoring process. </para>
        </briefdescription>
        <detaileddescription>
<para>This method sets the <computeroutput>running</computeroutput> flag to false, signaling the monitor thread to stop, and then joins the thread to wait for it to finish. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/LogMonitor.h" line="72" column="10" bodyfile="LogMonitor.cpp" bodystart="34" bodyend="39"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Class responsible for monitoring Zeek log files for new entries. </para>
    </briefdescription>
    <detaileddescription>
<para>The <computeroutput><ref refid="classLogMonitor" kindref="compound">LogMonitor</ref></computeroutput> class runs in a separate thread, continuously scanning a directory for new Zeek log files. It uses a <computeroutput><ref refid="classZeekLogParser" kindref="compound">ZeekLogParser</ref></computeroutput> to parse the log data and process it (e.g., by adding information to the network traffic graph). </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>LogMonitor</label>
        <link refid="classLogMonitor"/>
      </node>
    </collaborationgraph>
    <location file="includes/LogMonitor.h" line="26" column="1" bodyfile="includes/LogMonitor.h" bodystart="26" bodyend="73"/>
    <listofallmembers>
      <member refid="classLogMonitor_1a1574c6cc7f766782e8d4b9d22cfba910" prot="public" virt="non-virtual"><scope>LogMonitor</scope><name>LogMonitor</name></member>
      <member refid="classLogMonitor_1a2a98b0f60af7779ac8a793cd31ba77fa" prot="private" virt="non-virtual"><scope>LogMonitor</scope><name>monitor_thread</name></member>
      <member refid="classLogMonitor_1ab753311ac18f38efe399f01276d699e6" prot="private" virt="non-virtual"><scope>LogMonitor</scope><name>parser</name></member>
      <member refid="classLogMonitor_1a6dc3d433f8b192938592dbe40de9a360" prot="private" virt="non-virtual"><scope>LogMonitor</scope><name>running</name></member>
      <member refid="classLogMonitor_1a06798e36d1f46ba50036cdf4e511464a" prot="public" virt="non-virtual"><scope>LogMonitor</scope><name>start</name></member>
      <member refid="classLogMonitor_1af306da2a690908fb9a9369946791cafb" prot="public" virt="non-virtual"><scope>LogMonitor</scope><name>stop</name></member>
      <member refid="classLogMonitor_1a457807b7ece78c43bddb00d2a370d337" prot="public" virt="non-virtual"><scope>LogMonitor</scope><name>~LogMonitor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
