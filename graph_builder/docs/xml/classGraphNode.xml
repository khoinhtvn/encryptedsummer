<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="classGraphNode" kind="class" language="C++" prot="public">
    <compoundname>GraphNode</compoundname>
    <includes refid="GraphNode_8h" local="no">GraphNode.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classGraphNode_1a9ec8352ce6fc02929d03791bad1b949d" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GraphNode::id</definition>
        <argsstring></argsstring>
        <name>id</name>
        <qualifiedname>GraphNode::id</qualifiedname>
        <briefdescription>
<para>Unique identifier for the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="23" column="17" bodyfile="includes/GraphNode.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a6cbb744b50fd5621356036ffac4a534a" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string GraphNode::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <qualifiedname>GraphNode::type</qualifiedname>
        <briefdescription>
<para>Type of the node (e.g., &quot;host&quot;, &quot;service&quot;, &quot;domain&quot;). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="27" column="17" bodyfile="includes/GraphNode.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a2c594b99d6a85cd46b105fba519da025" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::string &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::string&gt; GraphNode::attributes</definition>
        <argsstring></argsstring>
        <name>attributes</name>
        <qualifiedname>GraphNode::attributes</qualifiedname>
        <briefdescription>
<para>Additional attributes associated with the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="31" column="24" bodyfile="includes/GraphNode.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a670878b3732a867f03d647293ff8c999" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::degree</definition>
        <argsstring></argsstring>
        <name>degree</name>
        <qualifiedname>GraphNode::degree</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Total degree of the node (number of connected edges). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="40" column="21" bodyfile="includes/GraphNode.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a801dee56f15b6fbd0c467b5bf16902b4" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::in_degree</definition>
        <argsstring></argsstring>
        <name>in_degree</name>
        <qualifiedname>GraphNode::in_degree</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>In-degree of the node (number of incoming edges). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="44" column="21" bodyfile="includes/GraphNode.h" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a08b422a344b59db81fa9b24752a6dd46" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::out_degree</definition>
        <argsstring></argsstring>
        <name>out_degree</name>
        <qualifiedname>GraphNode::out_degree</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Out-degree of the node (number of outgoing edges). </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="48" column="21" bodyfile="includes/GraphNode.h" bodystart="48" bodyend="48"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a90ac84a35374b57bf0eee149a1be810c" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, int &gt;</type>
        <definition>std::map&lt;std::string, int&gt; GraphNode::protocol_counts</definition>
        <argsstring></argsstring>
        <name>protocol_counts</name>
        <qualifiedname>GraphNode::protocol_counts</qualifiedname>
        <briefdescription>
<para>Counts of different protocols associated with the node&apos;s connections. The key is the protocol name, and the value is the count. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="53" column="18" bodyfile="includes/GraphNode.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a703ca88ecc4d49629d8978b2768f4d9c" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; double &gt;</type>
        <definition>std::atomic&lt;double&gt; GraphNode::activity_score</definition>
        <argsstring></argsstring>
        <name>activity_score</name>
        <qualifiedname>GraphNode::activity_score</qualifiedname>
        <initializer>{0.0}</initializer>
        <briefdescription>
<para>Score indicating the level of activity of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="57" column="21" bodyfile="includes/GraphNode.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a639d48f16977a8df7a06064719a55096" prot="public" static="no" mutable="no">
        <type>struct <ref refid="classGraphNode" kindref="compound">GraphNode</ref></type>
        <definition>struct GraphNode GraphNode::features</definition>
        <argsstring></argsstring>
        <name>features</name>
        <qualifiedname>GraphNode::features</qualifiedname>
        <briefdescription>
<para>Structure to hold various statistical features of the node. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="58" column="14"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a164b7d24668bfd11140684f8e1588fcd" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::connections_last_minute</definition>
        <argsstring></argsstring>
        <name>connections_last_minute</name>
        <qualifiedname>GraphNode::connections_last_minute</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Number of connections initiated or received by the node in the last minute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="67" column="21" bodyfile="includes/GraphNode.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a76b6d95dfe863ad77a818d2b36f450b9" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::connections_last_hour</definition>
        <argsstring></argsstring>
        <name>connections_last_hour</name>
        <qualifiedname>GraphNode::connections_last_hour</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Number of connections initiated or received by the node in the last hour. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="71" column="21" bodyfile="includes/GraphNode.h" bodystart="71" bodyend="71"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a8168b02a72ea169890faff00696f52a8" prot="public" static="no" mutable="no">
        <type>std::chrono::system_clock::time_point</type>
        <definition>std::chrono::system_clock::time_point GraphNode::monitoring_start</definition>
        <argsstring></argsstring>
        <name>monitoring_start</name>
        <qualifiedname>GraphNode::monitoring_start</qualifiedname>
        <briefdescription>
<para>Timestamp of when the monitoring of this node started. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="75" column="47" bodyfile="includes/GraphNode.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a8ddd1cab02cd802a3a9544511d94856c" prot="public" static="no" mutable="no">
        <type>std::atomic&lt; int &gt;</type>
        <definition>std::atomic&lt;int&gt; GraphNode::total_connections</definition>
        <argsstring></argsstring>
        <name>total_connections</name>
        <qualifiedname>GraphNode::total_connections</qualifiedname>
        <initializer>{0}</initializer>
        <briefdescription>
<para>Total number of connections associated with this node since monitoring started. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="79" column="21" bodyfile="includes/GraphNode.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1ab677cd2fc13c49b7771adb3c7e7da2b9" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::chrono::system_clock::time_point &gt;</type>
        <definition>std::vector&lt;std::chrono::system_clock::time_point&gt; GraphNode::recent_connections</definition>
        <argsstring></argsstring>
        <name>recent_connections</name>
        <qualifiedname>GraphNode::recent_connections</qualifiedname>
        <briefdescription>
<para>Vector storing timestamps of recent connections for more fine-grained analysis. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="83" column="21" bodyfile="includes/GraphNode.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a7442585422a9af484aa4ee1cbb8701ae" prot="public" static="no" mutable="no">
        <type>std::queue&lt; std::chrono::system_clock::time_point &gt;</type>
        <definition>std::queue&lt;std::chrono::system_clock::time_point&gt; GraphNode::minute_window</definition>
        <argsstring></argsstring>
        <name>minute_window</name>
        <qualifiedname>GraphNode::minute_window</qualifiedname>
        <briefdescription>
<para>Queue to store timestamps of connections within the last minute for efficient counting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="87" column="20" bodyfile="includes/GraphNode.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a963ae60d35fec246688469f2f47be491" prot="public" static="no" mutable="no">
        <type>std::queue&lt; std::chrono::system_clock::time_point &gt;</type>
        <definition>std::queue&lt;std::chrono::system_clock::time_point&gt; GraphNode::hour_window</definition>
        <argsstring></argsstring>
        <name>hour_window</name>
        <qualifiedname>GraphNode::hour_window</qualifiedname>
        <briefdescription>
<para>Queue to store timestamps of connections within the last hour for efficient counting. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="91" column="20" bodyfile="includes/GraphNode.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1af5c627d7ac20f7c90598ca7c3abfaf0a" prot="public" static="no" mutable="yes">
        <type>std::mutex</type>
        <definition>std::mutex GraphNode::window_mutex</definition>
        <argsstring></argsstring>
        <name>window_mutex</name>
        <qualifiedname>GraphNode::window_mutex</qualifiedname>
        <briefdescription>
<para>Mutex to protect access to the <computeroutput>minute_window</computeroutput> and <computeroutput>hour_window</computeroutput> queues, ensuring thread safety. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="95" column="28" bodyfile="includes/GraphNode.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classGraphNode_1a1e915cfefcf770cc1ceb007593b03511" prot="public" static="no" mutable="no">
        <type>struct <ref refid="classGraphNode" kindref="compound">GraphNode</ref></type>
        <definition>struct GraphNode GraphNode::temporal</definition>
        <argsstring></argsstring>
        <name>temporal</name>
        <qualifiedname>GraphNode::temporal</qualifiedname>
        <briefdescription>
<para>Structure to hold temporal features related to the node&apos;s connections over time. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="96" column="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="classGraphNode_1a8ef4f31129e46a8d33a1b2674731e53f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>GraphNode::GraphNode</definition>
        <argsstring>(const std::string &amp;id, const std::string &amp;type)</argsstring>
        <name>GraphNode</name>
        <qualifiedname>GraphNode::GraphNode</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Constructor for the <ref refid="classGraphNode" kindref="compound">GraphNode</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The unique identifier of the node. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the node (e.g., &quot;host&quot;, &quot;service&quot;). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="103" column="5" bodyfile="includes/GraphNode.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1aec41bf6dc8c079924a0076c6388b8de6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::update_connection_features</definition>
        <argsstring>(const std::string &amp;protocol, bool is_outgoing)</argsstring>
        <name>update_connection_features</name>
        <qualifiedname>GraphNode::update_connection_features</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>protocol</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_outgoing</declname>
        </param>
        <briefdescription>
<para>Updates the connection-related features of the node. </para>
        </briefdescription>
        <detaileddescription>
<para>This method increments the degree counters and updates the protocol counts based on a new connection involving this node.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>protocol</parametername>
</parameternamelist>
<parameterdescription>
<para>The protocol of the connection (e.g., &quot;tcp&quot;, &quot;udp&quot;). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_outgoing</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the connection is outgoing from this node, false otherwise. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="117" column="10" bodyfile="GraphNode.cpp" bodystart="11" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a9f6e0e9f78b21d99d3c858928762f983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::cleanup_old_connections</definition>
        <argsstring>()</argsstring>
        <name>cleanup_old_connections</name>
        <qualifiedname>GraphNode::cleanup_old_connections</qualifiedname>
        <briefdescription>
<para>Removes timestamps of old connections from the <computeroutput>recent_connections</computeroutput> vector. </para>
        </briefdescription>
        <detaileddescription>
<para>This method helps to keep the <computeroutput>recent_connections</computeroutput> vector manageable and relevant for short-term analysis. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="125" column="10" bodyfile="GraphNode.cpp" bodystart="44" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a92cd7727c4e791176e9e255b929b9603" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double GraphNode::calculate_anomaly_score</definition>
        <argsstring>() const</argsstring>
        <name>calculate_anomaly_score</name>
        <qualifiedname>GraphNode::calculate_anomaly_score</qualifiedname>
        <briefdescription>
<para>Calculates an anomaly score for the node based on its current features. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>A double representing the anomaly score. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="131" column="12" bodyfile="GraphNode.cpp" bodystart="59" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1a02be43aa36aa04eb5f47095fde4f95eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void GraphNode::cleanup_time_windows</definition>
        <argsstring>()</argsstring>
        <name>cleanup_time_windows</name>
        <qualifiedname>GraphNode::cleanup_time_windows</qualifiedname>
        <briefdescription>
<para>Removes outdated timestamps from the minute and hour time windows. </para>
        </briefdescription>
        <detaileddescription>
<para>This method ensures that the connection counts for the last minute and last hour are accurate by discarding timestamps that fall outside these windows. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="139" column="10" bodyfile="GraphNode.cpp" bodystart="78" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1aac8f32f0478ee7262d5db9c6ea4ee1c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GraphNode::get_connections_last_minute</definition>
        <argsstring>() const</argsstring>
        <name>get_connections_last_minute</name>
        <qualifiedname>GraphNode::get_connections_last_minute</qualifiedname>
        <briefdescription>
<para>Gets the number of connections associated with this node in the last minute. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of connections in the last minute. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="145" column="9" bodyfile="GraphNode.cpp" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classGraphNode_1ab197cc5d8d2abda61c831cae073cb140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GraphNode::get_connections_last_hour</definition>
        <argsstring>() const</argsstring>
        <name>get_connections_last_hour</name>
        <qualifiedname>GraphNode::get_connections_last_hour</qualifiedname>
        <briefdescription>
<para>Gets the number of connections associated with this node in the last hour. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The number of connections in the last hour. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="includes/GraphNode.h" line="151" column="9" bodyfile="GraphNode.cpp" bodystart="103" bodyend="106"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>Represents a node in the network traffic graph. </para>
    </briefdescription>
    <detaileddescription>
<para>Each <computeroutput><ref refid="classGraphNode" kindref="compound">GraphNode</ref></computeroutput> corresponds to an entity in the network, such as a host, service, or domain. It stores information about the node&apos;s identity, type, attributes, and various statistical features derived from the network traffic. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="1">
        <label>GraphNode</label>
        <link refid="classGraphNode"/>
        <childnode refid="2" relation="usage">
          <edgelabel>+id</edgelabel>
          <edgelabel>+type</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>+attributes</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>+connections_last_hour</edgelabel>
          <edgelabel>+connections_last_minute</edgelabel>
          <edgelabel>+degree</edgelabel>
          <edgelabel>+in_degree</edgelabel>
          <edgelabel>+out_degree</edgelabel>
          <edgelabel>+total_connections</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>+protocol_counts</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>+activity_score</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>+features</edgelabel>
        </childnode>
        <childnode refid="8" relation="usage">
          <edgelabel>+monitoring_start</edgelabel>
        </childnode>
        <childnode refid="9" relation="usage">
          <edgelabel>+recent_connections</edgelabel>
        </childnode>
        <childnode refid="10" relation="usage">
          <edgelabel>+hour_window</edgelabel>
          <edgelabel>+minute_window</edgelabel>
        </childnode>
        <childnode refid="11" relation="usage">
          <edgelabel>+window_mutex</edgelabel>
        </childnode>
        <childnode refid="12" relation="usage">
          <edgelabel>+temporal</edgelabel>
        </childnode>
      </node>
      <node id="7">
        <label>anonymous:+features</label>
      </node>
      <node id="12">
        <label>anonymous:+temporal</label>
      </node>
      <node id="6">
        <label>atomic&lt; double &gt;</label>
      </node>
      <node id="4">
        <label>atomic&lt; int &gt;</label>
      </node>
      <node id="8">
        <label>time_point</label>
      </node>
      <node id="5">
        <label>map&lt; std::string, int &gt;</label>
      </node>
      <node id="11">
        <label>mutex</label>
      </node>
      <node id="10">
        <label>queue&lt; std::chrono::system_clock::time_point &gt;</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>unordered_map&lt; std::string, std::string &gt;</label>
      </node>
      <node id="9">
        <label>vector&lt; std::chrono::system_clock::time_point &gt;</label>
      </node>
    </collaborationgraph>
    <location file="includes/GraphNode.h" line="18" column="1" bodyfile="includes/GraphNode.h" bodystart="18" bodyend="152"/>
    <listofallmembers>
      <member refid="classGraphNode_1a703ca88ecc4d49629d8978b2768f4d9c" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>activity_score</name></member>
      <member refid="classGraphNode_1a2c594b99d6a85cd46b105fba519da025" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>attributes</name></member>
      <member refid="classGraphNode_1a92cd7727c4e791176e9e255b929b9603" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>calculate_anomaly_score</name></member>
      <member refid="classGraphNode_1a9f6e0e9f78b21d99d3c858928762f983" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>cleanup_old_connections</name></member>
      <member refid="classGraphNode_1a02be43aa36aa04eb5f47095fde4f95eb" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>cleanup_time_windows</name></member>
      <member refid="classGraphNode_1a76b6d95dfe863ad77a818d2b36f450b9" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>connections_last_hour</name></member>
      <member refid="classGraphNode_1a164b7d24668bfd11140684f8e1588fcd" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>connections_last_minute</name></member>
      <member refid="classGraphNode_1a670878b3732a867f03d647293ff8c999" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>degree</name></member>
      <member refid="classGraphNode_1a639d48f16977a8df7a06064719a55096" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>features</name></member>
      <member refid="classGraphNode_1ab197cc5d8d2abda61c831cae073cb140" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>get_connections_last_hour</name></member>
      <member refid="classGraphNode_1aac8f32f0478ee7262d5db9c6ea4ee1c5" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>get_connections_last_minute</name></member>
      <member refid="classGraphNode_1a8ef4f31129e46a8d33a1b2674731e53f" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>GraphNode</name></member>
      <member refid="classGraphNode_1a963ae60d35fec246688469f2f47be491" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>hour_window</name></member>
      <member refid="classGraphNode_1a9ec8352ce6fc02929d03791bad1b949d" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>id</name></member>
      <member refid="classGraphNode_1a801dee56f15b6fbd0c467b5bf16902b4" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>in_degree</name></member>
      <member refid="classGraphNode_1a7442585422a9af484aa4ee1cbb8701ae" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>minute_window</name></member>
      <member refid="classGraphNode_1a8168b02a72ea169890faff00696f52a8" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>monitoring_start</name></member>
      <member refid="classGraphNode_1a08b422a344b59db81fa9b24752a6dd46" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>out_degree</name></member>
      <member refid="classGraphNode_1a90ac84a35374b57bf0eee149a1be810c" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>protocol_counts</name></member>
      <member refid="classGraphNode_1ab677cd2fc13c49b7771adb3c7e7da2b9" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>recent_connections</name></member>
      <member refid="classGraphNode_1a1e915cfefcf770cc1ceb007593b03511" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>temporal</name></member>
      <member refid="classGraphNode_1a8ddd1cab02cd802a3a9544511d94856c" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>total_connections</name></member>
      <member refid="classGraphNode_1a6cbb744b50fd5621356036ffac4a534a" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>type</name></member>
      <member refid="classGraphNode_1aec41bf6dc8c079924a0076c6388b8de6" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>update_connection_features</name></member>
      <member refid="classGraphNode_1af5c627d7ac20f7c90598ca7c3abfaf0a" prot="public" virt="non-virtual"><scope>GraphNode</scope><name>window_mutex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
